/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qbs.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!

//! [arguments]

    \section2 \c -- <arguments>

    Command-line arguments to be passed to the program to be run.

//! [arguments]


//! [configuration-name]

    \section2 \c configuration-name

    Specifies the build configuration to use.

    The \c debug and \c release configuration names imply the respective build
    variant. A debug build contains additional debug symbols that are needed for
    debugging the application but that can be left out from the release
    version. Generally, debug builds are used for testing and release builds
    for creating the final installation file.

    The build variant can also be specified explicitly by using the
    \l{qbs::buildVariant}{qbs.buildVariant} property.

    When naming configurations created for special purposes, follow the
    rules for legal names generally used in programming languages:

    \list
        \li The first character must be a letter (a-z), an underscore (_), or a
            dollar sign ($).
        \li Subsequent characters may be letters, digits, underscores, or dollar
            signs.
    \endlist

//! [configuration-name]

//! [key]

    \section2 \c <key>

    Typically, a \c <key> consists of several levels separated by periods. The
    first level shows a \e root value, such as \e preferences or \e profiles.
    The root determines whether the second-level keys are build preferences or
    profile names. The lower level keys consist of a module name, followed by a
    property name.

//! [key]

//! [property]

    \section2 \c {property:value}

    Property values set in project files or profiles can be overridden on the
    command line. The syntax is:

    \code
    <prefix>.<property-name>:<property-value>
    \endcode

    For more information, see
    \l{Overriding Property Values from the Command Line}.

//! [property]
*/
