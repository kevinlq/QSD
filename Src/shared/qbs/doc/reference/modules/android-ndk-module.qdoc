/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qbs.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \contentspage index.html
    \qmltype Android.ndk
    \inqmlmodule QbsModules
    \since Qbs 1.4

    \brief Provides support for building native Android libraries.

    The \c Android.ndk module contains the properties and rules to create native libraries
    for use in \l{AndroidApk}{Android application packages}.

    Normally, you will not use this module directly, but instead work
    with the \l{DynamicLibrary} and \l{StaticLibrary} items that \QBS provides.

    Here is what the project file for the \c hello-jni example that comes with
    the NDK could look like:

    \code
        import qbs

        Project {
            DynamicLibrary {
                name: "hello-jni"
                qbs.architectures: ["mips", "x86"]
                files: ["jni/hello-jni.c"]
            }

            AndroidApk {
                name: "HelloJni"
                packageName: "com.example.hellojni"
                Depends { productTypes: ["android.nativelibrary"] }
            }
        }
    \endcode

    \section2 Relevant File Tags
    \target filetags-android-ndk

    \table
    \header
        \li Tag
        \li Since
        \li Description
    \row
        \li \c{"android.nativelibrary"}
        \li 1.4.0
        \li Attached to dynamic libraries that will end up in APK packages.
            You do not normally need to use the tag explicitly, as it is the
            default type of the \l{DynamicLibrary} item for Android targets.
    \endtable
*/

/*!
    \qmlproperty string Android.ndk::abi

    The ABI name as it appears under \c "lib/" in the application package.
    Corresponds to \c APP_ABI in \c Android.mk.

    \nodefaultvalue
*/

/*!
    \qmlproperty string Android.ndk::appStl

    The library to use for C++. The possible values are:

    \list
        \li \c "c++_shared"
        \li \c "c++_static"
        \li \c "gabi++_shared"
        \li \c "gabi++_static"
        \li \c "gnustl_shared"
        \li \c "gnustl_static"
        \li \c "stlport_shared"
        \li \c "stlport_static"
        \li \c "system"
    \endlist

    \defaultvalue \c{"system"}
*/

/*!
    \qmlproperty path Android.ndk::ndkDir

    The NDK base directory.

    \nodefaultvalue
*/

/*!
    \qmlproperty string Android.ndk::platform

    The versioned platform name.

    \defaultvalue \c{"android-9"}
*/
